# -*- coding: utf-8 -*-
"""SMS Classifier

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fulSo6AmqI0QXf1r5UeEZMSruaTBsf6I
"""

import pandas as pd
import numpy as np
import nltk
import re
from nltk.corpus import stopwords

df = pd.read_csv("/content/spamsms.csv")
df.head()

df = df[['v2', 'v1']]
df = df.rename(columns={'v2': 'messages', 'v1': 'label'})
df.head()

df.isnull().sum()

!pip install nltk
import nltk
nltk.download('stopwords')

STOPWORDS = set(stopwords.words('english'))
def clean_text(text):
  text = text.lower()
  text = re.sub(r'[^0-9a-zA-Z]', ' ', text)
  text = re.sub(r'\s+', ' ', text)
  text = " ".join(word for word in text.split() if word not in STOPWORDS)
  return text

df['clean_text'] = df['messages'].apply(clean_text)
df.head()

X = df['clean_text']
y = df['label']

from sklearn.pipeline import Pipeline
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.metrics import classification_report
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer, TfidfTransformer

def classify(model, X, y):
  x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42, shuffle=True, stratify=y)

  pipeline_model = Pipeline([('vect', CountVectorizer()),
                               ('tfidf',TfidfTransformer()),
                               ('clf', model)])
  pipeline_model.fit(x_train, y_train)
  print('Accuracy:', pipeline_model.score(x_test, y_test)*100)
  y_pred = pipeline_model.predict(x_test)
  print(classification_report(y_test, y_pred))

from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
classify(model, X, y)

from sklearn.naive_bayes import MultinomialNB
model = MultinomialNB()
classify(model, X, y)

from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier()
classify(model, X, y)